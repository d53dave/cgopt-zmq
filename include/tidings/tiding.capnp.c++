// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: tiding.capnp

#include "tiding.capnp.h"

namespace capnp {
namespace schemas {
static const ::capnp::_::AlignedData<118> b_f07c8ad405cfcf5d = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     93, 207, 207,   5, 212, 138, 124, 240,
     17,   0,   0,   0,   1,   0,   2,   0,
    248, 108, 219,  18, 215, 163,  22, 165,
      4,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 194,   0,   0,   0,
     29,   0,   0,   0,  39,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     49,   0,   0,   0,  87,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115, 114,  99,  47, 116, 105, 100, 105,
    110, 103,  46,  99,  97, 112, 110, 112,
     58,  84, 105, 100, 105, 110, 103,   0,
      8,   0,   0,   0,   1,   0,   1,   0,
     14, 161,  51, 255, 182, 138, 143, 229,
      9,   0,   0,   0,  42,   0,   0,   0,
    217,  47,  72, 255,   5, 176, 204, 232,
      5,   0,   0,   0,  50,   0,   0,   0,
     84, 121, 112, 101,   0,   0,   0,   0,
     69, 114, 114, 111, 114,   0,   0,   0,
     24,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    153,   0,   0,   0,  26,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    148,   0,   0,   0,   3,   0,   1,   0,
    160,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    157,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    152,   0,   0,   0,   3,   0,   1,   0,
    164,   0,   0,   0,   2,   0,   1,   0,
      2,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   2,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    161,   0,   0,   0,  82,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    160,   0,   0,   0,   3,   0,   1,   0,
    172,   0,   0,   0,   2,   0,   1,   0,
      3,   0,   0,   0,   4,   0,   0,   0,
      0,   0,   1,   0,   3,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    169,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    164,   0,   0,   0,   3,   0,   1,   0,
    176,   0,   0,   0,   2,   0,   1,   0,
      4,   0,   0,   0,   2,   0,   0,   0,
      0,   0,   1,   0,   4,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    173,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    168,   0,   0,   0,   3,   0,   1,   0,
    180,   0,   0,   0,   2,   0,   1,   0,
      5,   0,   0,   0,   3,   0,   0,   0,
      0,   0,   1,   0,   5,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    177,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    172,   0,   0,   0,   3,   0,   1,   0,
    200,   0,   0,   0,   2,   0,   1,   0,
    105, 100,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115, 101, 110, 100, 101, 114,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    116, 105, 109, 101, 115, 116,  97, 109,
    112,   0,   0,   0,   0,   0,   0,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    116, 121, 112, 101,   0,   0,   0,   0,
     15,   0,   0,   0,   0,   0,   0,   0,
     14, 161,  51, 255, 182, 138, 143, 229,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     15,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    101, 114, 114, 111, 114,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    217,  47,  72, 255,   5, 176, 204, 232,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    112,  97, 121, 108, 111,  97, 100,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   3,   0,   1,   0,
     13,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_f07c8ad405cfcf5d = b_f07c8ad405cfcf5d.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_f07c8ad405cfcf5d[] = {
  &s_e58f8ab6ff33a10e,
  &s_e8ccb005ff482fd9,
};
static const uint16_t m_f07c8ad405cfcf5d[] = {4, 0, 5, 1, 2, 3};
static const uint16_t i_f07c8ad405cfcf5d[] = {0, 1, 2, 3, 4, 5};
const ::capnp::_::RawSchema s_f07c8ad405cfcf5d = {
  0xf07c8ad405cfcf5d, b_f07c8ad405cfcf5d.words, 118, d_f07c8ad405cfcf5d, m_f07c8ad405cfcf5d,
  2, 6, i_f07c8ad405cfcf5d, nullptr, nullptr, { &s_f07c8ad405cfcf5d, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<41> b_e58f8ab6ff33a10e = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     14, 161,  51, 255, 182, 138, 143, 229,
     24,   0,   0,   0,   2,   0,   0,   0,
     93, 207, 207,   5, 212, 138, 124, 240,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 234,   0,   0,   0,
     33,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0, 127,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115, 114,  99,  47, 116, 105, 100, 105,
    110, 103,  46,  99,  97, 112, 110, 112,
     58,  84, 105, 100, 105, 110, 103,  46,
     84, 121, 112, 101,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
     20,   0,   0,   0,   1,   0,   2,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     53,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0,  82,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      2,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  98,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      3,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0,  98,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    101, 114, 114, 111, 114,   0,   0,   0,
    104, 101,  97, 114, 116,  98, 101,  97,
    116,   0,   0,   0,   0,   0,   0,   0,
    119, 111, 114, 107,  82, 101, 113, 117,
    101, 115, 116,   0,   0,   0,   0,   0,
    119, 111, 114, 107,  82, 101, 115, 117,
    108, 116, 115,   0,   0,   0,   0,   0,
    115, 116,  97, 116, 115,   0,   0,   0, }
};
::capnp::word const* const bp_e58f8ab6ff33a10e = b_e58f8ab6ff33a10e.words;
#if !CAPNP_LITE
static const uint16_t m_e58f8ab6ff33a10e[] = {0, 1, 4, 2, 3};
const ::capnp::_::RawSchema s_e58f8ab6ff33a10e = {
  0xe58f8ab6ff33a10e, b_e58f8ab6ff33a10e.words, 41, nullptr, m_e58f8ab6ff33a10e,
  0, 5, nullptr, nullptr, nullptr, { &s_e58f8ab6ff33a10e, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
CAPNP_DEFINE_ENUM(Type_e58f8ab6ff33a10e, e58f8ab6ff33a10e);
static const ::capnp::_::AlignedData<54> b_e8ccb005ff482fd9 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    217,  47,  72, 255,   5, 176, 204, 232,
     24,   0,   0,   0,   1,   0,   1,   0,
     93, 207, 207,   5, 212, 138, 124, 240,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 242,   0,   0,   0,
     33,   0,   0,   0,  23,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0, 119,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115, 114,  99,  47, 116, 105, 100, 105,
    110, 103,  46,  99,  97, 112, 110, 112,
     58,  84, 105, 100, 105, 110, 103,  46,
     69, 114, 114, 111, 114,   0,   0,   0,
      4,   0,   0,   0,   1,   0,   1,   0,
    172, 230, 240, 110, 176,  79, 154, 209,
      1,   0,   0,   0,  82,   0,   0,   0,
     69, 114, 114, 111, 114,  84, 121, 112,
    101,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  82,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     40,   0,   0,   0,   3,   0,   1,   0,
     52,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     49,   0,   0,   0, 106,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     48,   0,   0,   0,   3,   0,   1,   0,
     60,   0,   0,   0,   2,   0,   1,   0,
    101, 114, 114, 111, 114,  84, 121, 112,
    101,   0,   0,   0,   0,   0,   0,   0,
     15,   0,   0,   0,   0,   0,   0,   0,
    172, 230, 240, 110, 176,  79, 154, 209,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     15,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    101, 114, 114, 111, 114,  77, 101, 115,
    115,  97, 103, 101,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_e8ccb005ff482fd9 = b_e8ccb005ff482fd9.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_e8ccb005ff482fd9[] = {
  &s_d19a4fb06ef0e6ac,
};
static const uint16_t m_e8ccb005ff482fd9[] = {1, 0};
static const uint16_t i_e8ccb005ff482fd9[] = {0, 1};
const ::capnp::_::RawSchema s_e8ccb005ff482fd9 = {
  0xe8ccb005ff482fd9, b_e8ccb005ff482fd9.words, 54, d_e8ccb005ff482fd9, m_e8ccb005ff482fd9,
  1, 2, i_e8ccb005ff482fd9, nullptr, nullptr, { &s_e8ccb005ff482fd9, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<40> b_d19a4fb06ef0e6ac = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    172, 230, 240, 110, 176,  79, 154, 209,
     30,   0,   0,   0,   2,   0,   0,   0,
    217,  47,  72, 255,   5, 176, 204, 232,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  66,   1,   0,   0,
     37,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0, 103,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115, 114,  99,  47, 116, 105, 100, 105,
    110, 103,  46,  99,  97, 112, 110, 112,
     58,  84, 105, 100, 105, 110, 103,  46,
     69, 114, 114, 111, 114,  46,  69, 114,
    114, 111, 114,  84, 121, 112, 101,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
     16,   0,   0,   0,   1,   0,   2,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  90,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0, 122,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      2,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0, 106,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      3,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0, 154,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     98, 117, 105, 108, 100,  69, 114, 114,
    111, 114,   0,   0,   0,   0,   0,   0,
    101, 120, 101,  99, 117, 116, 105, 111,
    110,  69, 114, 114, 111, 114,   0,   0,
    116, 105, 109, 101,  79, 117, 116,  69,
    114, 114, 111, 114,   0,   0,   0,   0,
     99, 111, 109, 109, 117, 110, 105,  99,
     97, 116, 105, 111, 110,  69, 114, 114,
    111, 114,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_d19a4fb06ef0e6ac = b_d19a4fb06ef0e6ac.words;
#if !CAPNP_LITE
static const uint16_t m_d19a4fb06ef0e6ac[] = {0, 3, 1, 2};
const ::capnp::_::RawSchema s_d19a4fb06ef0e6ac = {
  0xd19a4fb06ef0e6ac, b_d19a4fb06ef0e6ac.words, 40, nullptr, m_d19a4fb06ef0e6ac,
  0, 4, nullptr, nullptr, nullptr, { &s_d19a4fb06ef0e6ac, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
CAPNP_DEFINE_ENUM(ErrorType_d19a4fb06ef0e6ac, d19a4fb06ef0e6ac);
}  // namespace schemas
}  // namespace capnp

// =======================================================================================


// Tiding
#ifndef _MSC_VER
constexpr uint16_t Tiding::_capnpPrivate::dataWordSize;
constexpr uint16_t Tiding::_capnpPrivate::pointerCount;
#endif
#if !CAPNP_LITE
constexpr ::capnp::Kind Tiding::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Tiding::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* Tiding::_capnpPrivate::brand;
#endif  // !CAPNP_LITE

// Tiding::Error
#ifndef _MSC_VER
constexpr uint16_t Tiding::Error::_capnpPrivate::dataWordSize;
constexpr uint16_t Tiding::Error::_capnpPrivate::pointerCount;
#endif
#if !CAPNP_LITE
constexpr ::capnp::Kind Tiding::Error::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Tiding::Error::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* Tiding::Error::_capnpPrivate::brand;
#endif  // !CAPNP_LITE



